/* Standard Stuff */
#include <string.h>
#include <stdio.h>

/* Required Headers */
#include "controller.h"
#include "getch.h"

/* For Ach IPC */
#include <errno.h>
#include <fcntl.h>
#include <assert.h>
#include <unistd.h>
#include <pthread.h>
#include <ctype.h>
#include <stdbool.h>
#include <math.h>
#include <inttypes.h>
#include <ach.h>





/* Ach Channel IDs */
ach_channel_t chan_controller_ref;      // Feed-Forward (Reference)

int main(int argc, char **argv) {

    /* Open Ach Channel */
    int r = ach_open(&chan_controller_ref, CONTROLLER_REF_NAME , NULL);
    assert( ACH_OK == r );


    /* Create initial structures to read and write from */
    struct controller_ref c_ref;
    memset( &c_ref, 0, sizeof(c_ref));

    /* for size check */
    size_t fs;

    /* Get the current feed-forward (state) */
    r = ach_get( &chan_controller_ref, &c_ref, sizeof(c_ref), &fs, NULL, ACH_O_LAST );
    if(ACH_OK != r) {
        assert( sizeof(c_ref) == fs );
    }

/*    c_ref.mot1 = 1.234;
    c_ref.mot2 = 2.345;



    usleep(100000);
*/

    int KEY_UP = 65;
    int KEY_DOWN = 66;
    int KEY_RIGHT = 67;
    int KEY_LEFT = 68;
    int USER_QUIT = 100;

    char myKey = getch();

    printf("USER, PLEASE ENTER ARROW KEY OR QUIT WITH 'q'\n");


    //do not stop unless user quits with 'q'
    while(myKey != 'q'){
        printf("ENTER ARROW KEY OR QUIT WITH 'q'\n");
        if ((int)(myKey) == 27){
            myKey = getch();
            if((int)(myKey) == 91){
                myKey = getch();
                printf("%c", myKey);
		printf("\n");
                printf("%d",(int)(myKey));
                if((int)(myKey) == KEY_UP){
                    printf("increase wheel velocities\n");
                    r = ach_get( &chan_controller_ref, &c_ref, sizeof(c_ref), &fs, NULL, ACH_O_LAST );
                    if(ACH_OK != r) {
                        assert( sizeof(c_ref) == fs );
                    }
                    c_ref.key = (char)(KEY_UP);
                    ach_put( &chan_controller_ref, &c_ref, sizeof(c_ref));
                }
                else if((int)(myKey) == KEY_DOWN){
                    printf("decrease wheel velocities\n");
                    r = ach_get( &chan_controller_ref, &c_ref, sizeof(c_ref), &fs, NULL, ACH_O_LAST );
                    if(ACH_OK != r) {
                        assert( sizeof(c_ref) == fs );
                    }
                    c_ref.key = (char)(KEY_DOWN);
                    ach_put( &chan_controller_ref, &c_ref, sizeof(c_ref));
                }
                else if((int)(myKey) == KEY_LEFT){
                    printf("turn left\n");
                    r = ach_get( &chan_controller_ref, &c_ref, sizeof(c_ref), &fs, NULL, ACH_O_LAST );
                    if(ACH_OK != r) {
                        assert( sizeof(c_ref) == fs );
                    }
                    c_ref.key = (char)(KEY_LEFT);
                    ach_put( &chan_controller_ref, &c_ref, sizeof(c_ref));
                }
                else if((int)(myKey) == KEY_RIGHT){
                    printf("turn right\n");
                    r = ach_get( &chan_controller_ref, &c_ref, sizeof(c_ref), &fs, NULL, ACH_O_LAST );
                    if(ACH_OK != r) {
                        assert( sizeof(c_ref) == fs );
                    }
                    c_ref.key = (char)(KEY_RIGHT);
                    ach_put( &chan_controller_ref, &c_ref, sizeof(c_ref));
                }
                else{
                    myKey = getch();
                }
            }
            else{
                myKey = getch();
            }
        }
        else{
            myKey = getch();
        }

    }

    if(myKey == 'q'){
        printf("user wishes to quit\n");			
        r = ach_get( &chan_controller_ref, &c_ref, sizeof(c_ref), &fs, NULL, ACH_O_LAST );
        if(ACH_OK != r) {
            assert( sizeof(c_ref) == fs );
        }
        c_ref.key = (char)(USER_QUIT);
        ach_put( &chan_controller_ref, &c_ref, sizeof(c_ref));
    }

/*
    ach_put( &chan_controller_ref, &c_ref, sizeof(c_ref));
*/
}

